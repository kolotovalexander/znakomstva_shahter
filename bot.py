from __future__ import annotations

import logging
import os
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from database import Database

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

ASK_NAME, ASK_AGE, ASK_BIO = range(3)

db = Database()

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"],
        ["–ú–æ—è –∞–Ω–∫–µ—Ç–∞", "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"],
        ["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
)

BROWSE_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
        ["‚¨ÖÔ∏è –í –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
)


def _ensure_profile(update: Update) -> bool:
    user_row = db.get_user(update.effective_user.id)
    return bool(user_row and user_row["profile_completed"])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    db.upsert_user(user.id, user.username)

    if not _ensure_profile(update):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–∏–¥–µ–ª–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n"
            "–°–µ–π—á–∞—Å –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –µ—ë –≤ —Ç—Ä–∏ —à–∞–≥–∞:\n"
            "1. –ù–∞–ø–∏—à–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è.\n"
            "2. –£–∫–∞–∂–µ–º –≤–æ–∑—Ä–∞—Å—Ç.\n"
            "3. –î–æ–±–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏, –∫–∞–∫ —Ç–µ–±—è –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ASK_NAME

    await update.message.reply_text(
        "–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! üëã\n\n"
        "–ú–µ–Ω—é –Ω–∏–∂–µ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:\n"
        "- –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã ‚Äî –Ω–∞–π–¥–∏ –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        "- –ú–æ—è –∞–Ω–∫–µ—Ç–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å, –∫–∞–∫ —Ç–µ–±—è –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ.\n"
        "- –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –±—ã—Å—Ç—Ä–æ –ø–æ–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç.\n"
        "- –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞—á–Ω–∏ –≤—Å—ë —Å –Ω—É–ª—è.",
        reply_markup=MAIN_KEYBOARD,
    )
    return ConversationHandler.END


async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ASK_NAME

    context.user_data["profile_name"] = name
    await update.message.reply_text("–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º).")
    return ASK_AGE


async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ASK_AGE

    age = int(text)
    if age < 16 or age > 100:
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 100 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ASK_AGE

    context.user_data["profile_age"] = age
    await update.message.reply_text("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Å–µ–±–µ.")
    return ASK_BIO


async def finish_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    bio = update.message.text.strip()
    if len(bio) < 5:
        await update.message.reply_text("–û–ø–∏—à–∏ —Å–µ–±—è —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ASK_BIO

    user = update.effective_user
    name = context.user_data.get("profile_name")
    age = context.user_data.get("profile_age")

    db.set_profile(user.id, name, age, bio, user.username)
    context.user_data.pop("profile_name", None)
    context.user_data.pop("profile_age", None)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
        reply_markup=MAIN_KEYBOARD,
    )
    return ConversationHandler.END


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    profile = db.get_user(user_id)
    if not profile or not profile["profile_completed"]:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É, –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—à—å –µ—ë –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    text = (
        f"–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n"
        f"{profile['display_name']}, {profile['age']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {profile['bio']}"
    )
    await update.message.reply_text(text, reply_markup=MAIN_KEYBOARD)


async def restart_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    db.reset_profile(update.effective_user.id)
    await update.message.reply_text(
        "–ó–∞–ø–æ–ª–Ω–∏–º –≤—Å—ë –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ —Ç–µ–±—è –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏?",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_NAME


async def change_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not _ensure_profile(update):
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    profile = db.get_user(update.effective_user.id)
    context.user_data["profile_name"] = profile["display_name"]
    context.user_data["profile_age"] = profile["age"]
    await update.message.reply_text(
        "–û–±–Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã. –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_BIO


async def browse_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not _ensure_profile(update):
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    await send_next_profile(update, context)


async def send_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    candidate = db.get_next_profile(update.effective_user.id)
    if not candidate:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ!",
            reply_markup=MAIN_KEYBOARD,
        )
        context.user_data.pop("current_candidate", None)
        return

    context.user_data["current_candidate"] = candidate["telegram_id"]
    text = (
        f"{candidate['display_name']}, {candidate['age']}\n"
        f"{candidate['bio']}"
    )
    await update.message.reply_text(text, reply_markup=BROWSE_KEYBOARD)


async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    candidate_id = context.user_data.get("current_candidate")
    if not candidate_id:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–Ω–∫–µ—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'.",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    user_id = update.effective_user.id
    db.record_reaction(user_id, candidate_id, "like")

    if db.has_mutual_like(user_id, candidate_id):
        await notify_match(user_id, candidate_id, context)

    await send_next_profile(update, context)


async def handle_skip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    candidate_id = context.user_data.get("current_candidate")
    if not candidate_id:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∞–Ω–∫–µ—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'.",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    user_id = update.effective_user.id
    db.record_reaction(user_id, candidate_id, "skip")
    await send_next_profile(update, context)


async def notify_match(user_a: int, user_b: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    profile_a = db.get_profile_text(user_a)
    profile_b = db.get_profile_text(user_b)
    if not profile_a or not profile_b:
        return

    message_for_a = (
        "–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n"
        f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n{profile_b}"
    )
    message_for_b = (
        "–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n"
        f"–ê–Ω–∫–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n{profile_a}"
    )

    await context.bot.send_message(chat_id=user_a, text=message_for_a)
    await context.bot.send_message(chat_id=user_b, text=message_for_b)


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.pop("current_candidate", None)
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
        reply_markup=MAIN_KEYBOARD,
    )


def main() -> None:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ .env")

    application = ApplicationBuilder().token(token).build()

    profile_conversation = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_profile)],
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True,
    )

    reprofile_conversation = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ$"), restart_profile),
            CommandHandler("reset", restart_profile),
            MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ$"), change_bio),
        ],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_profile)],
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True,
    )

    application.add_handler(profile_conversation)
    application.add_handler(reprofile_conversation)
    application.add_handler(CommandHandler("myprofile", show_profile))
    application.add_handler(MessageHandler(filters.Regex("^–ú–æ—è –∞–Ω–∫–µ—Ç–∞$"), show_profile))
    application.add_handler(MessageHandler(filters.Regex("^–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã$"), browse_profiles))
    application.add_handler(MessageHandler(filters.Regex("^‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è$"), handle_like))
    application.add_handler(MessageHandler(filters.Regex("^‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$"), handle_skip))
    application.add_handler(MessageHandler(filters.Regex("^‚¨ÖÔ∏è –í –º–µ–Ω—é$"), back_to_menu))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("Bot is up and running")
    application.run_polling()


if __name__ == "__main__":
    main()

